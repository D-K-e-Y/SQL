*** “Оптимизация запросов” ***

***
1. Создайте таблицу logs типа Archive. Пусть при каждом создании записи в таблицах users, catalogs и products в таблицу logs 
помещается время и дата создания записи, название таблицы, идентификатор первичного ключа и содержимое поля name.
***

DROP TABLE IF EXISTS logs;
CREATE TABLE logs (
	created_at DATETIME NOT NULL,
	table_name VARCHAR(45) NOT NULL,
	key_id BIGINT(30) NOT NULL,
	name_value VARCHAR(45) NOT NULL
) ENGINE = ARCHIVE;


***
users TRIGGER 
***

DROP TRIGGER IF EXISTS watchlog_users;
delimiter //
CREATE TRIGGER watchlog_users AFTER INSERT ON users
FOR EACH ROW
BEGIN
	INSERT INTO logs (created_at, table_name, key_id, name_value)
	VALUES (NOW(), 'users', NEW.id, NEW.name);
END 
// delimiter ;


*** 
catalogs TRIGGER 
*** 

DROP TRIGGER IF EXISTS watchlog_catalogs;
delimiter //
CREATE TRIGGER watchlog_catalogs AFTER INSERT ON catalogs
FOR EACH ROW
BEGIN
	INSERT INTO logs (created_at, table_name, key_id, name_value)
	VALUES (NOW(), 'catalogs', NEW.id, NEW.name);
END 
// delimiter ;


*** 
products TRIGGER
***

delimiter //
CREATE TRIGGER watchlog_products AFTER INSERT ON products
FOR EACH ROW
BEGIN
	INSERT INTO logs (created_at, table_name, key_id, name_value)
	VALUES (NOW(), 'products', NEW.id, NEW.name);
END 
// delimiter;

*********************************************
*** “NoSQL” ***

***
1. В базе данных Redis подберите коллекцию для подсчета посещений с определенных IP-адресов.
***

// просмотрим список уникальных ip
SMEMBERS ip
// кол-во адресов в коллекции
SCARD ip


***
2. При помощи базы данных Redis решите задачу поиска имени пользователя по электронному адресу и наоброт, поиск электронного адреса пользователя по его имени.
***

set dkey dkey@gmail.com
set dkey@gmail.com dkey 

get dkey dkey@gmail.com
get dkey@gmail.com dkey 

***
3. Организуйте хранение категорий и товарных позиций учебной базы данных shop в СУБД MongoDB.

*** products ***
use products
db.products.insert({"name": "Intel Core i3-8100", "description": "Процессор для настольных ПК", "price": "8000.00", "catalog_id": "Процессоры", "created_at": new Date(), "updated_at": new Date()}) 

db.products.insertMany([
	{"name": "AMD FX-8320", "description": "Процессор для настольных ПК", "price": "4000.00", "catalog_id": "Процессоры", "created_at": new Date(), "updated_at": new Date()},
	{"name": "AMD FX-8320E", "description": "Процессор для настольных ПК", "price": "4500.00", "catalog_id": "Процессоры", "created_at": new Date(), "updated_at": new Date()}
  ])

db.products.find().pretty()
db.products.find({name: "AMD FX-8320"}).pretty()


*** catalogs ***
use catalogs
db.catalogs.insertMany([{"name": "Процессоры"}, {"name": "Мат.платы"}, {"name": "Видеокарты"}])
